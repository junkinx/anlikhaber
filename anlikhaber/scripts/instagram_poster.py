import os
import sys
import logging
import time
from datetime import datetime
from instagrapi import Client
from instagrapi.exceptions import LoginRequired, ClientError
from dotenv import load_dotenv
import random

# Ana dizini ekleyelim
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models import db, Haber, Ayarlar

# .env dosyasÄ±nÄ± yÃ¼kle
load_dotenv()

# Loglama ayarlarÄ±
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'logs', 'instagram_poster.log')),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Instagram bilgilerini al
INSTAGRAM_USERNAME = os.getenv('INSTAGRAM_USERNAME')
INSTAGRAM_PASSWORD = os.getenv('INSTAGRAM_PASSWORD')

# Instagram oturum dosyasÄ±
SESSION_FILE = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'data', 'instagram_session.json')

# Hashtag listesi
DEFAULT_HASHTAGS = [
    "#sondakika", "#haber", "#gÃ¼ndem", "#tÃ¼rkiye", "#haberler", 
    "#gÃ¼ncel", "#son", "#dakika", "#gÃ¼ncelhaberler", "#haberinolsun"
]

def instagram_client_olustur():
    """Instagram istemcisi oluÅŸturur ve oturum aÃ§ar"""
    try:
        # KlasÃ¶rÃ¼n var olduÄŸundan emin ol
        os.makedirs(os.path.dirname(SESSION_FILE), exist_ok=True)
        
        # Instagram istemcisi oluÅŸtur
        cl = Client()
        
        # Daha Ã¶nce kaydedilmiÅŸ oturum var mÄ± kontrol et
        if os.path.exists(SESSION_FILE):
            try:
                # Oturumu yÃ¼kle
                cl.load_settings(SESSION_FILE)
                
                # Oturumun geÃ§erli olup olmadÄ±ÄŸÄ±nÄ± kontrol et
                cl.get_timeline_feed()
                logger.info("Instagram oturumu baÅŸarÄ±yla yÃ¼klendi.")
                return cl
            
            except (LoginRequired, ClientError) as e:
                logger.warning(f"KaydedilmiÅŸ oturum geÃ§ersiz, yeniden giriÅŸ yapÄ±lÄ±yor: {str(e)}")
        
        # KullanÄ±cÄ± adÄ± ve ÅŸifre kontrolÃ¼
        if not INSTAGRAM_USERNAME or not INSTAGRAM_PASSWORD:
            logger.error("INSTAGRAM_USERNAME veya INSTAGRAM_PASSWORD bulunamadÄ±. .env dosyasÄ±nÄ± kontrol edin.")
            return None
        
        # GiriÅŸ yap
        cl.login(INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD)
        
        # Oturumu kaydet
        cl.dump_settings(SESSION_FILE)
        
        logger.info("Instagram'a baÅŸarÄ±yla giriÅŸ yapÄ±ldÄ±.")
        return cl
    
    except Exception as e:
        logger.error(f"Instagram istemcisi oluÅŸturulurken hata oluÅŸtu: {str(e)}")
        return None

def hashtag_olustur(baslik, kaynak, ekstra_hashtags=None):
    """Haber baÅŸlÄ±ÄŸÄ±na ve kaynaÄŸÄ±na gÃ¶re hashtag oluÅŸturur"""
    hashtags = DEFAULT_HASHTAGS.copy()
    
    # Kaynak hashtag'i ekle
    if kaynak:
        kaynak_hashtag = f"#{kaynak.lower().replace(' ', '').replace('Ä±', 'i')}"
        hashtags.append(kaynak_hashtag)
    
    # Ekstra hashtag'leri ekle
    if ekstra_hashtags:
        hashtags.extend(ekstra_hashtags)
    
    # BaÅŸlÄ±ktan anahtar kelimeleri Ã§Ä±kar
    anahtar_kelimeler = [kelime.lower() for kelime in baslik.split() if len(kelime) > 4]
    
    # En fazla 5 anahtar kelime seÃ§
    secilen_kelimeler = random.sample(anahtar_kelimeler, min(5, len(anahtar_kelimeler)))
    
    # Anahtar kelimeleri hashtag'e dÃ¶nÃ¼ÅŸtÃ¼r
    for kelime in secilen_kelimeler:
        # TÃ¼rkÃ§e karakterleri deÄŸiÅŸtir
        kelime = kelime.replace('Ä±', 'i').replace('ÄŸ', 'g').replace('Ã¼', 'u').replace('ÅŸ', 's').replace('Ã¶', 'o').replace('Ã§', 'c')
        
        # Ã–zel karakterleri temizle
        kelime = ''.join(c for c in kelime if c.isalnum())
        
        if kelime and len(kelime) > 2:
            hashtags.append(f"#{kelime}")
    
    # Hashtag'leri karÄ±ÅŸtÄ±r ve en fazla 15 tanesini seÃ§
    random.shuffle(hashtags)
    secilen_hashtags = hashtags[:15]
    
    return ' '.join(secilen_hashtags)

def haber_paylasim_metni_olustur(haber):
    """Haber iÃ§in Instagram paylaÅŸÄ±m metnini oluÅŸturur"""
    try:
        # BaÅŸlÄ±k
        metin = f"ğŸ“° {haber.baslik}\n\n"
        
        # Ã–zet
        if haber.ozet:
            metin += f"{haber.ozet}\n\n"
        
        # Kaynak
        metin += f"ğŸ“Œ Kaynak: {haber.kaynak}\n\n"
        
        # Hashtag'ler
        metin += hashtag_olustur(haber.baslik, haber.kaynak)
        
        return metin
    
    except Exception as e:
        logger.error(f"PaylaÅŸÄ±m metni oluÅŸturulurken hata oluÅŸtu: {str(e)}")
        return f"ğŸ“° {haber.baslik}\n\nğŸ“Œ Kaynak: {haber.kaynak}\n\n#sondakika #haber"

def haber_paylas(haber_id):
    """Belirli bir haberi Instagram'da paylaÅŸÄ±r"""
    try:
        # Haberi al
        haber = Haber.query.get(haber_id)
        
        if not haber:
            logger.error(f"Haber bulunamadÄ±: ID {haber_id}")
            return False
        
        # Ä°ÅŸlenmiÅŸ gÃ¶rsel var mÄ± kontrol et
        if not haber.islenmis_gorsel_path or not os.path.exists(haber.islenmis_gorsel_path):
            logger.error(f"Ä°ÅŸlenmiÅŸ gÃ¶rsel bulunamadÄ±: {haber.islenmis_gorsel_path}")
            return False
        
        # Instagram istemcisi oluÅŸtur
        cl = instagram_client_olustur()
        
        if not cl:
            logger.error("Instagram istemcisi oluÅŸturulamadÄ±.")
            return False
        
        # PaylaÅŸÄ±m metnini oluÅŸtur
        paylasim_metni = haber_paylasim_metni_olustur(haber)
        
        # GÃ¶rseli paylaÅŸ
        try:
            logger.info(f"Haber Instagram'da paylaÅŸÄ±lÄ±yor: {haber.baslik}")
            
            # GÃ¶rseli paylaÅŸ
            media = cl.photo_upload(
                haber.islenmis_gorsel_path,
                caption=paylasim_metni
            )
            
            # PaylaÅŸÄ±m bilgilerini gÃ¼ncelle
            haber.instagram_post_id = media.id
            haber.paylasildi = True
            haber.paylasilma_zamani = datetime.now()
            db.session.commit()
            
            logger.info(f"Haber baÅŸarÄ±yla paylaÅŸÄ±ldÄ±: {haber.baslik}")
            
            # PaylaÅŸÄ±mdan sonra biraz bekle (Instagram rate limit'lerini aÅŸmamak iÃ§in)
            time.sleep(5)
            
            return True
        
        except Exception as e:
            logger.error(f"Haber paylaÅŸÄ±lÄ±rken hata oluÅŸtu: {str(e)}")
            return False
    
    except Exception as e:
        logger.error(f"Haber paylaÅŸÄ±lÄ±rken genel hata oluÅŸtu: {str(e)}")
        db.session.rollback()
        return False

def paylasilmamis_haberleri_paylas(max_paylasim=1):
    """VeritabanÄ±ndaki paylaÅŸÄ±lmamÄ±ÅŸ haberleri Instagram'da paylaÅŸÄ±r"""
    try:
        # PaylaÅŸÄ±lmamÄ±ÅŸ ve paylaÅŸÄ±ma hazÄ±r haberleri al
        paylasilmamis_haberler = Haber.query.filter_by(paylasildi=False, paylasima_hazir=True).filter(
            Haber.islenmis_gorsel_path.isnot(None),
            Haber.ozet.isnot(None)
        ).order_by(Haber.olusturulma_zamani.desc()).limit(max_paylasim).all()
        
        if not paylasilmamis_haberler:
            logger.info("PaylaÅŸÄ±lacak haber bulunamadÄ±.")
            return 0
        
        paylasilan_haber_sayisi = 0
        
        # Instagram istemcisi oluÅŸtur
        cl = instagram_client_olustur()
        
        if not cl:
            logger.error("Instagram istemcisi oluÅŸturulamadÄ±.")
            return 0
        
        for haber in paylasilmamis_haberler:
            try:
                # Ä°ÅŸlenmiÅŸ gÃ¶rsel var mÄ± kontrol et
                if not haber.islenmis_gorsel_path or not os.path.exists(haber.islenmis_gorsel_path):
                    logger.warning(f"Ä°ÅŸlenmiÅŸ gÃ¶rsel bulunamadÄ±: {haber.islenmis_gorsel_path}")
                    continue
                
                # PaylaÅŸÄ±m metnini oluÅŸtur
                paylasim_metni = haber_paylasim_metni_olustur(haber)
                
                # GÃ¶rseli paylaÅŸ
                logger.info(f"Haber Instagram'da paylaÅŸÄ±lÄ±yor: {haber.baslik}")
                
                media = cl.photo_upload(
                    haber.islenmis_gorsel_path,
                    caption=paylasim_metni
                )
                
                # PaylaÅŸÄ±m bilgilerini gÃ¼ncelle
                haber.instagram_post_id = media.id
                haber.paylasildi = True
                haber.paylasilma_zamani = datetime.now()
                db.session.commit()
                
                logger.info(f"Haber baÅŸarÄ±yla paylaÅŸÄ±ldÄ±: {haber.baslik}")
                
                paylasilan_haber_sayisi += 1
                
                # PaylaÅŸÄ±mlar arasÄ±nda bekle (Instagram rate limit'lerini aÅŸmamak iÃ§in)
                if paylasilan_haber_sayisi < len(paylasilmamis_haberler):
                    time.sleep(60)  # 1 dakika bekle
            
            except Exception as e:
                logger.error(f"Haber paylaÅŸÄ±lÄ±rken hata oluÅŸtu (ID: {haber.id}): {str(e)}")
                db.session.rollback()
        
        return paylasilan_haber_sayisi
    
    except Exception as e:
        logger.error(f"Haberler paylaÅŸÄ±lÄ±rken genel hata oluÅŸtu: {str(e)}")
        return 0

def son_paylasimi_sil():
    """Son paylaÅŸÄ±lan haberi Instagram'dan siler"""
    try:
        # Son paylaÅŸÄ±lan haberi al
        son_paylasilan_haber = Haber.query.filter_by(paylasildi=True).order_by(Haber.paylasilma_zamani.desc()).first()
        
        if not son_paylasilan_haber or not son_paylasilan_haber.instagram_post_id:
            logger.warning("Silinecek paylaÅŸÄ±m bulunamadÄ±.")
            return False
        
        # Instagram istemcisi oluÅŸtur
        cl = instagram_client_olustur()
        
        if not cl:
            logger.error("Instagram istemcisi oluÅŸturulamadÄ±.")
            return False
        
        # PaylaÅŸÄ±mÄ± sil
        try:
            logger.info(f"Instagram paylaÅŸÄ±mÄ± siliniyor: {son_paylasilan_haber.baslik}")
            
            cl.media_delete(son_paylasilan_haber.instagram_post_id)
            
            # PaylaÅŸÄ±m bilgilerini gÃ¼ncelle
            son_paylasilan_haber.paylasildi = False
            son_paylasilan_haber.instagram_post_id = None
            son_paylasilan_haber.paylasilma_zamani = None
            db.session.commit()
            
            logger.info(f"Instagram paylaÅŸÄ±mÄ± baÅŸarÄ±yla silindi: {son_paylasilan_haber.baslik}")
            
            return True
        
        except Exception as e:
            logger.error(f"Instagram paylaÅŸÄ±mÄ± silinirken hata oluÅŸtu: {str(e)}")
            return False
    
    except Exception as e:
        logger.error(f"Son paylaÅŸÄ±m silinirken genel hata oluÅŸtu: {str(e)}")
        db.session.rollback()
        return False

if __name__ == "__main__":
    # Bu script doÄŸrudan Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda test amaÃ§lÄ± Ã§alÄ±ÅŸÄ±r
    from app import create_app
    app = create_app()
    with app.app_context():
        paylasilan_haber_sayisi = paylasilmamis_haberleri_paylas(max_paylasim=1)
        print(f"Toplam {paylasilan_haber_sayisi} haber Instagram'da paylaÅŸÄ±ldÄ±.") 